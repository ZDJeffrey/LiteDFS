# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import name_node_pb2 as name__node__pb2


class NameNodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.touch = channel.unary_unary(
                '/NameNode/touch',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.TouchResponse.FromString,
                )
        self.mkdir = channel.unary_unary(
                '/NameNode/mkdir',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.MkdirResponse.FromString,
                )
        self.ls = channel.unary_unary(
                '/NameNode/ls',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.LsResponse.FromString,
                )
        self.cd = channel.unary_unary(
                '/NameNode/cd',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.CdResponse.FromString,
                )
        self.rm = channel.unary_unary(
                '/NameNode/rm',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.RmResponse.FromString,
                )
        self.rmdir = channel.unary_unary(
                '/NameNode/rmdir',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.RmdirResponse.FromString,
                )
        self.open = channel.unary_unary(
                '/NameNode/open',
                request_serializer=name__node__pb2.OpenRequest.SerializeToString,
                response_deserializer=name__node__pb2.OpenResponse.FromString,
                )
        self.closeTouch = channel.unary_unary(
                '/NameNode/closeTouch',
                request_serializer=name__node__pb2.CloseTouchRequest.SerializeToString,
                response_deserializer=name__node__pb2.CloseResponse.FromString,
                )
        self.closeRead = channel.unary_unary(
                '/NameNode/closeRead',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.CloseResponse.FromString,
                )
        self.closeWrite = channel.unary_unary(
                '/NameNode/closeWrite',
                request_serializer=name__node__pb2.PathRequest.SerializeToString,
                response_deserializer=name__node__pb2.CloseWriteResponse.FromString,
                )


class NameNodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def touch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mkdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rmdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeTouch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'touch': grpc.unary_unary_rpc_method_handler(
                    servicer.touch,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.TouchResponse.SerializeToString,
            ),
            'mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.mkdir,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.MkdirResponse.SerializeToString,
            ),
            'ls': grpc.unary_unary_rpc_method_handler(
                    servicer.ls,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.LsResponse.SerializeToString,
            ),
            'cd': grpc.unary_unary_rpc_method_handler(
                    servicer.cd,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.CdResponse.SerializeToString,
            ),
            'rm': grpc.unary_unary_rpc_method_handler(
                    servicer.rm,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.RmResponse.SerializeToString,
            ),
            'rmdir': grpc.unary_unary_rpc_method_handler(
                    servicer.rmdir,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.RmdirResponse.SerializeToString,
            ),
            'open': grpc.unary_unary_rpc_method_handler(
                    servicer.open,
                    request_deserializer=name__node__pb2.OpenRequest.FromString,
                    response_serializer=name__node__pb2.OpenResponse.SerializeToString,
            ),
            'closeTouch': grpc.unary_unary_rpc_method_handler(
                    servicer.closeTouch,
                    request_deserializer=name__node__pb2.CloseTouchRequest.FromString,
                    response_serializer=name__node__pb2.CloseResponse.SerializeToString,
            ),
            'closeRead': grpc.unary_unary_rpc_method_handler(
                    servicer.closeRead,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.CloseResponse.SerializeToString,
            ),
            'closeWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.closeWrite,
                    request_deserializer=name__node__pb2.PathRequest.FromString,
                    response_serializer=name__node__pb2.CloseWriteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NameNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NameNode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def touch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/touch',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.TouchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/mkdir',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.MkdirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/ls',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.LsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/cd',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.CdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/rm',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.RmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rmdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/rmdir',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.RmdirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/open',
            name__node__pb2.OpenRequest.SerializeToString,
            name__node__pb2.OpenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def closeTouch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/closeTouch',
            name__node__pb2.CloseTouchRequest.SerializeToString,
            name__node__pb2.CloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def closeRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/closeRead',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.CloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def closeWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NameNode/closeWrite',
            name__node__pb2.PathRequest.SerializeToString,
            name__node__pb2.CloseWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
